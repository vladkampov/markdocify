name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

# Security: Minimal permissions
permissions:
  contents: read
  security-events: write
  checks: write

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [1.23, 1.24]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # v4.1.7
      with:
        fetch-depth: 0 # For proper version detection

    - name: Set up Go
      uses: actions/setup-go@v5 # v5.0.2
      with:
        go-version: ${{ matrix.go-version }}
        check-latest: true

    - name: Cache Go modules
      uses: actions/cache@v4 # v4.1.2
      with:
        path: |
          ~/go/pkg/mod
          ~/.cache/go-build
        key: ${{ runner.os }}-go-${{ matrix.go-version }}-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-${{ matrix.go-version }}-
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run tests
      run: make test

    - name: Upload coverage to Codecov
      if: matrix.go-version == '1.24' # Only upload once
      uses: codecov/codecov-action@v4 # v4.6.0
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
      with:
        file: ./coverage.out
        fail_ci_if_error: false # Don't fail CI if codecov is down

  lint:
    name: Lint
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # v4.1.7

    - name: Set up Go
      uses: actions/setup-go@v5 # v5.0.2
      with:
        go-version: '1.24'
        check-latest: true

    - name: Check Go formatting
      run: |
        echo "Checking Go code formatting..."
        if [ -n "$(gofmt -l .)" ]; then
          echo "❌ The following files need formatting:"
          gofmt -l .
          echo ""
          echo "Run 'make fmt' or 'gofmt -w .' to format them"
          exit 1
        fi
        echo "✓ All files are properly formatted"

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6 # v6.1.0
      with:
        version: latest
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # v4.1.7

    - name: Set up Go
      uses: actions/setup-go@v5 # v5.0.2
      with:
        go-version: '1.24'

    - name: Run Go security check
      run: |
        # Use go vet for basic security checks
        go vet ./...
        
        # Use govulncheck for vulnerability scanning
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

    - name: Check for vulnerabilities
      run: |
        # Use Go's built-in vulnerability checking
        go list -json -deps ./... | grep -v "indirect" || true

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [test, lint, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4 # v4.1.7
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5 # v5.0.2
      with:
        go-version: '1.24'

    - name: Build for multiple platforms
      run: make build-all

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4 # v4.3.6
      with:
        name: binaries
        path: bin/
        retention-days: 7